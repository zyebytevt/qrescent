/*
Qrescent - Lighting shader

Renders objects with just their vertex colors, textures
and lights influencing the object.
*/

vertex `
#version 400 core
#define MAX_LIGHTS 8

layout(location=0) in vec3 position;
layout(location=1) in vec2 uv;
layout(location=2) in vec3 normal;
layout(location=3) in vec4 color;

out vec2 passUV;
out vec3 passNormal;
out vec4 passColor;
out vec3 passToLightVector[MAX_LIGHTS];
out vec3 passToCameraVector;

uniform mat4 transform;
uniform mat4 projection;
uniform mat4 view;

uniform uint lightsCount;
uniform struct Light
{
    vec3 position;
    vec3 color;
    vec3 attenuation;
} lights[MAX_LIGHTS];

void main()
{
    vec4 worldPosition = transform * vec4(position, 1.0);
    gl_Position = projection * view * worldPosition;

    for (int i = 0; i < lightsCount; i++)
        passToLightVector[i] = lights[i].position - worldPosition.xyz;

    passUV = uv;
    passColor = color;
    passToCameraVector = (inverse(view) * vec4(0, 0, 0, 1)).xyz - worldPosition.xyz;
    passNormal = (transform * vec4(normal, 0)).xyz;
}
`

fragment `
#version 400 core
#define MAX_LIGHTS 8
#define TEXTURE_ALBEDO 1
#define TEXTURE_NORMAL 1<<1

in vec2 passUV;
in vec3 passNormal;
in vec4 passColor;
in vec3 passToLightVector[MAX_LIGHTS];
in vec3 passToCameraVector;

// TODO: Implement normal mapping https://www.youtube.com/watch?v=4DUfwAEx4Ts

out vec4 finalColor;

uniform uint texUseFlags = 0;
uniform sampler2D texAlbedo;
uniform sampler2D texNormal;

uniform float shineDamper = 10;
uniform float reflectivity = 1;

uniform uint lightsCount;
uniform struct Light
{
    vec3 position;
    vec3 color;
    vec3 attenuation;
} lights[MAX_LIGHTS];

void main()
{
    vec3 unitNormal = normalize(passNormal);
    vec3 unitVectorToCamera = normalize(passToCameraVector);

    vec3 totalDiffuse = vec3(0);
    vec3 totalSpecular = vec3(0);

    for (int i = 0; i < lightsCount; i++)
    {
        float distance = length(passToLightVector[i]);
        float attenuationFactor = lights[i].attenuation.x + (lights[i].attenuation.y * distance) +
            (lights[i].attenuation.z * distance * distance);
        
        vec3 unitLightVector = normalize(passToLightVector[i]);

        float specularFactor = max(
            dot(reflect(-unitLightVector, unitNormal), unitVectorToCamera),
            0);
        specularFactor = pow(specularFactor, shineDamper);

        totalDiffuse += (dot(unitNormal, unitLightVector) * lights[i].color) / attenuationFactor;
        totalSpecular += (specularFactor * reflectivity * lights[i].color) / attenuationFactor;
    }

    finalColor = passColor;

    if ((texUseFlags & TEXTURE_ALBEDO) > 0)
        finalColor *= texture(texAlbedo, passUV);

    finalColor = finalColor * vec4(totalDiffuse, 1) + vec4(totalSpecular, 0);
}
`